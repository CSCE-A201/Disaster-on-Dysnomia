/*
------------------------------------------------------------------
  Title: Text Based RPG - Name pending
  Creators: NAMES HERE
  Description:
    You are on a mission to escape by rescuing a copilot
    and repair the spaceship's engines. Gameplay includes
    enemy combat, navigate through different rooms,
    encounter challenges, and solve puzzles to succeed.

    Rooms:
    - Medical Bay: Starting point with supplies.
    - Sleeping Quarters: Find the copilot.
    - Storage Room: Encounter a space pirate.
    - Engine Room: Solve a puzzle to fix the engines.
    - Cockpit: Check mission success conditions.

    Game Mechanics:
    - Movement: Choose options to move between rooms.
    - Combat: Dice rolls determine outcomes against enemies.
    - Puzzle: Solve puzzles to progress. WIP
    - Success: Check if copilot is safe and engines are fixed.
-------------------------------------------------------------------
*/

#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <cstdlib>
#include <ctime>

using namespace std;

// Function to read text from a file
// Takes a filename as an argument and returns the file's content as a string
string readFromFile(const string& filename)
{
    ifstream file(filename);
    if (!file)
    {
        cerr << "Error: Could not open file " << filename << endl;
        return "";
    }
    ostringstream content;
    content << file.rdbuf();
    file.close();
    return content.str();
}

// Function to wait for any key press
// Pauses the game until the player presses a key
void waitForKeyPress()
{
    cout << "Press any key to roll the dice...\n";
    cin.ignore();
    cin.get();
}

//Class for the player
enum location {ENGINE_ROOM, HALLWAY, COCKPIT, STORAGE, MEDICAL_BAY, SLEEPING_QUARTERS};

class Player {
    public:
        bool get_key() const {
            return key;
        }
        void set_key(bool val) {
            key = val;
        }
        bool get_enginePiece() const {
            return enginePiece;
        }
        void set_enginePiece(bool val) {
            enginePiece = val;
        }
        location get_location() const {
            return playerLocation;
        }
        void set_location(location val) {
            playerLocation = val;
        }
        string get_name() const {
            return name;
        }
        void set_name(string val) {
            name = val;
        }
    private:
        bool key = false; //indicate if player has key from copilot
        bool enginePiece = false; //indicate if player has engine piece from storage
        location playerLocation; track player location
        string name; //name if we want to implement
};

// Class for the Copilot
class Copilot
{
public:
    bool obtained; // Indicates if the copilot has been found
    bool injured;  // Indicates if the copilot is injured

    // Constructor to initialize copilot state
    Copilot() : obtained(false), injured(false) {}
};

// Base class for a Room
class Room
{
public:
    // Virtual function to be implemented by derived room classes
    virtual void enter(Copilot& copilot, EngineRoom& engineRoom, Player& player) = 0;
};

// Class for the Cockpit
class Cockpit : public Room
{
public:
    // Function to handle entering the cockpit
    void enter(Copilot& copilot, EngineRoom& engineRoom, Player& player) override
    {
        cout << readFromFile("cockpit.txt");
        if (copilot.obtained && !copilot.injured && engineRoom.get_enginesOn())
        {
            cout << readFromFile("cockpit_success.txt");
            exit(0); // End game if success conditions are met
        }
        else
        {
            cout << readFromFile("cockpit_fail.txt");
        }
    }
};

// Class for the Sleeping Quarters
class SleepingQuarters : public Room
{
public:
    // Function to handle entering the sleeping quarters
    void enter(Copilot& copilot, EngineRoom& engineRoom, Player& player) override
    {
        cout << readFromFile("sleeping_quarters.txt");
        if (!copilot.obtained)
        {
            cout << readFromFile("copilot_found.txt");
            copilot.obtained = true; // Mark copilot as found
        }
        else
        {
            cout << readFromFile("copilot_already_with_you.txt");
        }
    }
};

// Class for the Medical Bay
class MedicalBay : public Room
{
public:
    // Function to handle entering the medical bay
    void enter(Copilot& copilot, EngineRoom& engineRoom, Player& player) override
    {
        cout << readFromFile("medical_bay.txt");
        if (copilot.obtained && copilot.injured)
        {
            cout << readFromFile("copilot_healed.txt");
            copilot.injured = false; // Heal the copilot
        }
        else
        {
            cout << readFromFile("nothing_to_do.txt");
        }
    }
};

// Class for the Storage Room
class StorageRoom : public Room
{
public:
    // Function to handle entering the storage room
    void enter(Copilot& copilot, EngineRoom& engineRoom, Player& player) override
    {
        if (!copilot.obtained)
        {
            cout << readFromFile("storage_locked.txt");
            return; // Prevent entry if copilot is not found
        }

        cout << readFromFile("storage_room.txt");
        cout << readFromFile("enemy_appears.txt");

        int totalRoll = 0;
        for (int i = 0; i < 3; ++i)
        {
            waitForKeyPress();
            int roll = rand() % 20 + 1;
            cout << "You rolled a " << roll << ".\n";
            totalRoll += roll;
        }

        if (totalRoll >= 40)
        {
            cout << readFromFile("enemy_defeated.txt");
        }
        else
        {
            cout << readFromFile("copilot_injured.txt");
            copilot.injured = true; // Mark copilot as injured
        }

        cout << readFromFile("tool_found.txt");
        player.set_enginePiece(true); // Mark tool as found
    }
};

// Class for the Engine Room
class EngineRoom : public Room
{
public:
    // Function to handle entering the engine room
    void enter(Copilot& copilot, Player& player) override
    {
        cout << readFromFile("engine_room.txt");
        if (!player)
        {
            cout << readFromFile("need_tool.txt");
            return; // Prevent puzzle solving if tool is not found
        }

        cout << readFromFile("solving_puzzle.txt");
        // Simple puzzle simulation
        cout << readFromFile("puzzle_solved.txt");
        enginesOn = true; // Mark engines as fixed
    }

    bool get_enginesOn() {
        return enginesOn;
    }

private:
    bool enginesOn; //track if engines are on
};

class Hallway {
	public:
		void Hallway::move() {
            cout << "Choose an option:\n";
            cout << "A. Go to Cockpit\n";
            cout << "B. Go to Sleeping Quarters\n";
            cout << "C. Go to Medical Bay\n";
            cout << "D. Go to Storage Room\n";
            cout << "E. Go to Engine Room\n";

            cout << "\nWhere would you like to go?: ";
            cin >> choice;
        };

        char getChoice() const {
            return choice;
        };
	
	private:
		char choice;
};

int main()
{
    // Initialize game state
    Copilot copilot; // Create an instance of Copilot

    // Initialize room objects
    Cockpit cockpit;
    SleepingQuarters sleepingQuarters;
    MedicalBay medicalBay;
    StorageRoom storageRoom;
    EngineRoom engineRoom;
    Hallway hallway;
    Player player;

    srand(static_cast<unsigned int>(time(0))); // Seed the random number generator

    // Display welcome message and introduction
    cout << "Welcome to the Untitled RPG game!\n";
    cout << readFromFile("introduction.txt");

    // Main game loop
    while (true)
    {
        hallway.move();

        // Handle room entry based on player's choice
        switch (hallway.getChoice())
        {
            case 'A':
            case 'a':
                player.playerLocation(COCKPIT);
                cockpit.enter(copilot, engineRoom, player);
                break;
            case 'B':
            case 'b':
                player.playerLocation(SLEEPING_QUARTERS);
                sleepingQuarters.enter(copilot, engineRoom, player);
                break;
            case 'C':
            case 'c':
                player.playerLocation(medicalBay);
                medicalBay.enter(copilot, engineRoom, player);
                break;
            case 'D':
            case 'd':
                player.playerLocation(STORAGE);
                storageRoom.enter(copilot, engineRoom, player);
                break;
            case 'E':
            case 'e':
                player.playerLocation(ENGINE_ROOM);
                engineRoom.enter(copilot, player);
                break;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    }
    return 0;
}
